#!/bin/bash

BGreen='\e[1;32m'       # Green
BRed='\e[1;31m'         # Red
Color_Off='\e[0m'       # Text Reset
VERSION="0.1.0"

function setStatusMessage {
    printf "${IRed} --> ${BGreen}$1${Color_Off}\n" 1>&2
}

function triggerError {
    printf "${BRed} --> $1 ${Color_Off}\n" 1>&2
    exit 1
}

# Check whether a command exists - returns 0 if it does, 1 if it does not
function exists {
  if command -v $1 >/dev/null 2>&1
  then
    return 0
  else
    return 1
  fi
}

# credits https://github.com/boxcutter/osx/blob/master/script/xcode-cli-tools.sh
function install_clt {
   # Get and install Xcode CLI tools
   OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

   # on 10.9+, we can leverage SUS to get the latest CLI tools
   if [ "$OSX_VERS" -ge 9 ]; then
       # create the placeholder file that's checked by CLI updates' .dist code in Apple's SUS catalog
       touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
       # find the CLI Tools updates
       UPDATES=$(softwareupdate -l | grep "\*.*Command Line" | sed -e 's/[ *]*//')
       while read -r line; do
           softwareupdate --verbose --install "$line"
       done <<< "$UPDATES"
       rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
   else
       triggerError "Mac OS 10.$OSX_VERS not supported."
   fi
}

#
# Print version information
#
# $1: the version
#
function show_version
{
    echo "${0##*/} $VERSION"
    exit 0
}

#
# Echos text to strerr.
#
# $1: the text to echo
#
function error
{
    echo "error: $1" >&2
    exit 1
}

function print_usage
{
    echo "usage: superlumic [-h] [-v] [-a | -f FILE] [-u USER] [-r REPOSITORY]"
}

function show_help
{
    print_usage
    echo
    echo "Superlumic is a light utility wrapper around Ansible to ease the automated install"
    echo "of OSX 10.10 and higher."
    echo
    echo "optional arguments"
    echo "  -h, --help            show this help message and exit"
    echo "  -v, --version         show program's version number and exit"
    echo "  -u, --user USER       name of user playbook (default: current user)"
    echo "  -a, --ask-vault-pass  ask for vault password"
    echo "  -f, --vault-password-file"
    echo "                        vault password file or script"
    echo "  -r, --repository REPOSITORY"
    echo "                        repository to use (default: https://github.com/superlumic/superlumic-config.git)"
    echo
    echo "for more detail, use: man superlumic"
    exit 0
}

# parse comment line arguments
username="$(whoami)"
repo=https://github.com/Brickstertwo/superlumic-config
ask_vault_pass=false
vault_password_file=
while getopts ":hvu:r:af:-:" opt; do
    case $opt in
        -)
            case "${OPTARG}" in
                user)
                    username="${!OPTIND}"
                    OPTIND=$(( $OPTIND + 1 ))
                    if [[ -z "$username" ]]; then
                        error "Option --$OPTARG requires an argument."
                    fi
                    ;;
                repository)
                    repo="${!OPTIND}"
                    OPTIND=$(( $OPTIND + 1 ))
                    if [[ -z "$repo" ]]; then
                        error "Option --$OPTARG requires an argument."
                    fi
                    ;;
                ask-vault-pass)
                    ask_vault_pass=true
                    ;;
                vault-password-file)
                    vault_password_file="${!OPTIND}"
                    OPTIND=$(( $OPTIND + 1 ))
                    if [[ -z "$vault_password_file" ]]; then
                        error "Option --$OPTARG requires an argument."
                    fi
                    ;;
                help)                   show_help;;
                version)                show_version;;
                *)                      error "Unimplemented option --${OPTARG}";;
            esac
            ;;
        u)  username="$OPTARG";;
        r)  repo="$OPTARG";;
        a)  ask_vault_pass=true;;
        f)  vault_password_file="$OPTARG";;
        h)  show_help;;
        v)  show_version;;
        \?) error "Invalid option: -$OPTARG";;
        :)  error "Option -$OPTARG requires an argument.";;
        *)  error "Unimplemented option: -$OPTARG";;
    esac
done

if $ask_vault_pass && [[ ! -z "$vault_password_file" ]]; then
    print_usage
    error "options -a|--ask-vault-pass and -f|--vault-password-file FILE are mutually exclusive"
fi

# TODO: temporarily added --no-quarantine as a workaround to homebrew/brew#4852
export HOMEBREW_CASK_OPTS="--no-quarantine --appdir=~/Applications"

# Banner generated at http://patorjk.com/software/taag/#p=display&f=Slant&t=superlumic
printf "${BGreen}                               __                _     ${Color_Off}\n"
printf "${BGreen}   _______  ______  ___  _____/ /_  ______ ___  (_)____${Color_Off}\n"
printf "${BGreen}  / ___/ / / / __ \/ _ \/ ___/ / / / / __ \`__ \/ / ___/${Color_Off}\n"
printf "${BGreen} (__  ) /_/ / /_/ /  __/ /  / / /_/ / / / / / / / /__  ${Color_Off}\n"
printf "${BGreen}/____/\__,_/ .___/\___/_/  /_/\__,_/_/ /_/ /_/_/\___/  ${Color_Off}\n"
printf "${BGreen}          /_/ http://superlumic.com                    ${Color_Off}\n\n"

# install CLT
if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    setStatusMessage "Install the CLT"
    install_clt
fi

# Install Ansible
if ! exists brew; then
	setStatusMessage "Install Homebrew"
	yes | /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &> /dev/null
fi
if ! exists python || ! exists pip; then
    # brew python (pip is included) if either python or pip isn't installed
    # TODO: probably should check for existing brewed python if only pip isn't installed
    setStatusMessage "Install Python and PIP"
    brew install python@2
fi
if ! exists ansible; then
    setStatusMessage "Install Ansible"
    pip install --upgrade setuptools --user python
    pip install -q ansible
fi

setStatusMessage "Create necessary folders"
if [[ ! -d "/usr/local/superlumic" ]]; then
  sudo mkdir -p /usr/local/superlumic/roles
  sudo chmod -R g+rwx /usr/local/superlumic
  sudo chgrp -R admin /usr/local/superlumic
fi

if [ -d "/usr/local/superlumic/config" ]; then
    setStatusMessage "Update your config from git"
    cd /usr/local/superlumic/config
    git pull -q
else
    if [ ! -z "$repo" ]; then
        setStatusMessage "Cloning config from git"
        git clone -q "$repo" /usr/local/superlumic/config
    else
      triggerError 'No config exists. --repository=<<repository>> is required.'
    fi
fi

cd /usr/local/superlumic

setStatusMessage "Create ansible.cfg"

{ echo '[defaults]'; echo 'roles_path=/usr/local/superlumic/roles:/usr/local/superlumic/config/roles'; } > ansible.cfg

setStatusMessage "Get all the required roles"

ansible-galaxy install -f -r config/requirements.yml -p roles

if [ -f "config/$username.yml" ]; then
    setStatusMessage "Running the ansible playbook for $username"
    if $ask_vault_pass; then
        ansible-playbook -i "localhost," config/$username.yml --ask-become-pass --ask-vault-pass
    elif [[ ! -z "$vault_password_file" ]]; then
        ansible-playbook -i "localhost," config/$username.yml --ask-become-pass --vault-password-file "$vault_password_file"
    else
        ansible-playbook -i "localhost," config/$username.yml --ask-become-pass 
    fi
else
    triggerError "No playbook for $username found"
fi
